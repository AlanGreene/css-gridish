@import "variables";
@import "values";

/// Traverse maps and retrieve deeply nested values.
/// @author Hugo Giraudel
/// @param {map} A sass map.
/// @param {arglist} Any number of keys.
/// @return {*} Nested values or nested map.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// Function returns the rem value of a given breakpoint.
/// @param {string} An existing breakpoint name (sm, md, lg, amd so on).
/// @return {length} The breakpoint value in rems.
@function getBreakpointValue($breakpointName) {
  $breakpointValue: map-deep-get($grid-values, 'breakpoints', $breakpointName, 'breakpoint');
  @return $breakpointValue * 1rem;
}

/// Returns a calc() expression that represents a fluid width at a given breakpoint.
/// @param {string} A valid breakpoint (sm, md, lg, xlg, or max)
/// @param {number} The number of columns to span across.
/// @return {length} A calc() expression representing fluid width.
@function getFluidSize($breakpointName, $columns) {
  $fluidWidth: 0; // default

  $breakpoint: map-deep-get($grid-values, 'breakpoints', $breakpointName);

  @if (map-get($breakpoint, columns) != null) {
    $columnQuantity: map-get($breakpoint, columns);
    $fluidWidth: 100vw / $columnQuantity;

    $totalMargin: 0;
    @if (map-get($breakpoint, margin) != null) {
      $totalMargin: map-get($breakpoint, margin) * 2;
    }

    $fluidWidth: calc((100vw - #{$totalMargin}) * #{$columns} / #{$columnQuantity});
  }

  @return $fluidWidth;
}

/// Gets a calculated rem value for a fixed nondimensional unit size.
/// @param {number} Fixed nondimensional units.
/// @return {length} A calculated rem value.
@function getFixedSize($fixedUnit) {

  $remValue: 0; // default

  @if $fixedUnit != null and $fixedUnit > 0 {
    $remValue: $fixedUnit * map-get($grid-values, 'rowHeight') * 1rem;
  }
  @else {
    @error 'The provided value #{$fixedUnit} to getFixedSize() is not a number.'
  }

  @return $remValue;
}